---
interface Props {
  mock2Src: string;
}
const { mock2Src } = Astro.props as Props;
---
<figure class="lg:col-span-2 overflow-hidden">
  <!-- Contenedor que recorta el 15% izquierdo -->
  <div class="map-container relative inline-block" style="transform: translateX(+15%);">
    <img
      src={mock2Src}
      alt="Mapa"
      class="block w-full h-auto"
      aria-hidden="true"
    />
    <!-- Pins posicionados con % respecto al ancho natural de la imagen -->
    <div class="map-pin" style="top: 12%; left: 60%;"></div>
    <div class="map-pin" style="top: 28%; left: 48%;"></div>
    <div class="map-pin" style="top: 38%; left: 70%;"></div>
  </div>
</figure>

<style>
  .map-container {
    /* inline-block hace que su ancho sea el de la imagen real */
  }

  .map-pin {
    position: absolute;
    width: 8%;
    aspect-ratio: 1;
    background-color: #f3bc30;
    border-radius: 50% 50% 50% 0;
    transform-origin: 0% 100%;
    box-shadow: -2px 2px 4px rgba(0,0,0,0.3);
    z-index: 10;
    opacity: 0;
    transform: rotate(-45deg) scale(0.5);
    transition: opacity 0.5s ease-out, transform 0.5s ease-out;
  }
  .map-pin.is-visible {
    opacity: 1;
    transform: rotate(-45deg) scale(1);
  }
  .map-pin::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 35.7%;
    height: 35.7%;
    background-color: white;
    border-radius: 50%;
    transform: translate(-50%, -50%);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const mapPinsNodeList = document.querySelectorAll('.map-pin');
    if (!mapPinsNodeList.length) return;

    // Convertir NodeList a Array para usar métodos de array como findIndex
    const mapPinsArray = Array.from(mapPinsNodeList);

    const baseDelayIncrement = 250; // ms - Retraso incremental para cada pin
    const overallInitialDelay = 300; // ms - Retraso inicial para todos los pines

    const observer = new IntersectionObserver((entries, obs) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const pinElement = entry.target;
          // Encontrar el índice del pin actual para calcular el retraso escalonado
          const pinIndex = mapPinsArray.findIndex(p => p === pinElement);

          if (pinIndex !== -1) { // Asegurarse de que el pin fue encontrado
            setTimeout(() => {
              pinElement.classList.add('is-visible');
            }, overallInitialDelay + pinIndex * baseDelayIncrement);
          } else {
            // Fallback: si no se encuentra el índice, mostrarlo inmediatamente
            pinElement.classList.add('is-visible');
          }
          obs.unobserve(pinElement); // Dejar de observar una vez que la animación está programada
        }
      });
    }, { threshold: 0.4 }); // La animación se dispara cuando el 40% del pin es visible

    mapPinsArray.forEach(pin => {
      observer.observe(pin);
    });
  });
</script>
